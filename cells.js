// Generated by CoffeeScript 1.3.3
(function() {
  var Cell,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Array.prototype.remove = function(e) {
    var t, _ref;
    if ((t = this.indexOf(e)) > -1) {
      return ([].splice.apply(this, [t, t - t + 1].concat(_ref = [])), _ref);
    }
  };

  Function.prototype.curry = function() {
    var constructor_args, func;
    func = this;
    constructor_args = arrSlice.call(arguments);
    return function() {
      var func_args;
      func_args = arrSlice.call(arguments);
      return func.apply(this, constructor_args.concat(func_args));
    };
  };

  if (this.Spine == null) {
    this.Spine = require('spine');
  }

  Cell = (function(_super) {

    __extends(Cell, _super);

    Cell.extend(Spine.Events);

    function Cell(id) {
      this.id = id;
      this.data = {};
      this.tokens = {};
    }

    Cell.prototype._new_token_id = function() {
      return new Date().getTime();
    };

    Cell.prototype.set = function(key, value, token, fire) {
      if (fire == null) {
        fire = true;
      }
      console.log("cell [set] " + key + " " + value + " " + token + " " + fire);
      this.data[key] = value;
      if (!((token != null) || token > this.tokens[key])) {
        return;
      }
      token = this.tokens[key] = this._new_token_id();
      if (fire) {
        console.log("cells firing set_cell_value");
        return this.trigger('set_cell_value', {
          key: key,
          value: value,
          token: token
        });
      }
    };

    Cell.prototype.get = function(key) {
      return this.data[key];
    };

    Cell.prototype.set_data = function(data) {
      var k, token, v;
      if (!(data != null ? data.length : void 0)) {
        return;
      }
      token = this._new_token_id();
      for (k in data) {
        v = data[k];
        this.set(k, v, token, false);
      }
      return this.trigger('set_cell_data', {
        id: this.id,
        data: data,
        token: token
      });
    };

    Cell.prototype.clear = function() {
      return this.set_data({});
    };

    return Cell;

  })(Spine.Model);

  if (this.app == null) {
    this.app = {};
  }

  if (this.app.objects == null) {
    this.app.objects = {};
  }

  this.app.objects.Cell = Cell;

  this.app.objects.Cells = Cells;

}).call(this);
