// Generated by CoffeeScript 1.3.3
(function() {
  var app, get_cell_data, get_cell_value, io, last_cell_id, next_cell_id, requirejs, server, set_cell_data, set_cell_value;

  requirejs = require('requirejs');

  requirejs(['spine', 'socket.io', 'express', 'mediator', 'cell'], function(spine, io, express, mediator, cell) {});

  app = express();

  server = app.listen(8080);

  app.use(express["static"](__dirname + '/'));

  io = io.listen(server);

  last_cell_id = 0;

  next_cell_id = function() {
    last_cell_id += 1;
    return last_cell_id;
  };

  set_cell_value = function(id, key, value, emit, callback) {
    var cell, old_value;
    console.log("setting cell value " + id + " " + key + " " + value + " " + emit);
    if (!id) {
      id = next_cell_id();
      console.log("getting next id " + id);
    }
    if (cells[id] == null) {
      cells[id] = {};
    }
    cell = cells[id];
    old_value = cell[key];
    cell[key] = value;
    if (emit) {
      cells.trigger('set_cell_value', {
        id: id,
        key: key,
        old_value: old_value,
        new_value: value
      });
    }
    return callback(id, key, value, old_value);
  };

  set_cell_data = function(id, data, callback) {
    var count, key, len, old_values, value,
      _this = this;
    count = 0;
    len = data.length;
    old_values = {};
    for (key in data) {
      value = data[key];
      set_cell_value(id, key, value, false, function(_id, key, value, old_value) {
        if (!id) {
          id = _id;
        }
        count += 1;
        old_values[key] = old_value;
        if (count === len) {
          return cells.trigger('set_cell_data', {
            id: id,
            old_values: old_values,
            new_values: data
          });
        }
      });
    }
    if (data.length === 0) {
      cells[id] = {};
    }
    return callback(id, data);
  };

  get_cell_data = function(id, callback) {
    return callback(id, cells.id || {});
  };

  get_cell_value = function(id, key, callback) {
    var _ref;
    return callback(id, typeof cells !== "undefined" && cells !== null ? (_ref = cells.id) != null ? _ref.key : void 0 : void 0);
  };

  io.sockets.on('connection', function(socket) {
    socket.on('set_cell_value', function(data) {
      console.log("set cell value:");
      console.log(data);
      return set_cell_value(data.id, data.key, data.value, true, function(id, key, value, old_value) {
        var args;
        console.log("cell value set " + id + " " + key + " " + value + " " + old_value);
        /*
                # TODO: why doesnt this work ?
                [socket.emit, socket.broadcast.emit].forEach (emitter, i, l) ->
                console.log "emitter #{emitter}"
        */

        args = {
          success: true,
          id: id,
          key: key,
          value: value,
          token: data != null ? data.token : void 0
        };
        socket.emit('set_cell_value', args);
        return socket.broadcast.emit('set_cell_value', args);
      });
    });
    socket.on('set_cell_data', function(data) {
      var _this = this;
      console.log("set cell data");
      console.log(data);
      return set_cell_data(data.id, data.data, function(id, data, old_data) {
        var args;
        console.log("cell data set " + id);
        args = {
          success: true,
          id: id,
          data: data,
          old_data: old_data,
          token: data != null ? data.token : void 0
        };
        socket.emit('set_cell_data', args);
        return socket.broadcast.emit('set_cell_data', args);
      });
    });
    socket.on('get_cell_value', function(data) {
      var _this = this;
      return get_cell_value(data.id, data.key, function(id, value) {
        var args;
        args = {
          success: true,
          id: id,
          key: key,
          value: value,
          token: data != null ? data.token : void 0
        };
        socket.emit('get_cell_value', args);
        return socket.broadcast.emit('get_cell_value', args);
      });
    });
    return socket.on('get_cell_data', function(data) {
      var _this = this;
      return get_cell_data(data.id, function(id, data) {
        var args;
        args = {
          success: true,
          id: id,
          data: data,
          token: data != null ? data.token : void 0
        };
        socket.emit('get_cell_data', args);
        return socket.broadcast.emit('get_cell_data', args);
      });
    });
  });

}).call(this);
