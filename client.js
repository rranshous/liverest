// Generated by CoffeeScript 1.3.3
(function() {
  var Cell, cells, event_handlers, event_name, handler, last_token_id, next_token_id, socket,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  cells = {};

  last_token_id = 0;

  next_token_id = function() {
    last_token_id += 1;
    return last_token_id;
  };

  event_handlers = {
    set_cell_value: function(data) {
      var cell, id, key, set_value, token, value, _i, _j, _len, _len1, _ref, _ref1, _results;
      id = data.id;
      key = data.key;
      value = data.value;
      token = data.token;
      set_value = function(cell) {
        var token_key;
        token_key = '_' + key;
        if (__indexOf.call(cell, token_key) >= 0) {
          if (token < cell[token_key]) {
            continue;
          } else {
            cell[token_key] = token;
          }
        }
        return cell.key = value;
      };
      _ref = cells[id] || [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cell = _ref[_i];
        set_value(cell);
      }
      _ref1 = cells[token] || [];
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        cell = _ref1[_j];
        _results.push(set_value(cell));
      }
      return _results;
    },
    set_cell_data: function(data) {
      var id, k, new_values, token, v, _results;
      id = data.id;
      token = id.token;
      new_values = data.new_values;
      _results = [];
      for (k in new_values) {
        v = new_values[k];
        _results.push(handlers.set_cell_value(id, {
          id: id,
          key: k,
          value: v,
          token: token
        }));
      }
      return _results;
    }
  };

  socket = io.connect('http://localhost');

  for (event_name in event_handlers) {
    handler = event_handlers[event_name];
    socket.on(event_name, handler);
    cells.on(event_name, handler);
  }

  cells.on('set_cell_value', function(data) {
    return socket.emit('set_cell_value', data);
  });

  cells.on('set_cell_data', function(data) {
    return socket.emit('set_cell_data', data);
  });

  Cell = (function() {

    function Cell(id) {
      this.id = id;
      this.data = {};
    }

    Cell.prototype.set = function(key, value, token, fire) {
      var token_key,
        _this = this;
      if (fire == null) {
        fire = true;
      }
      token = get_next_token();
      this.data[key] = value;
      token_key = '_' + key;
      this.data[token_key] = token;
      if (!this.id) {
        (cells[token_key] ? cells[token_key] : function() {
          return cells[token_key] = [];
        }).append(this);
      }
      return cells.fire('set_cell_value', {
        id: this.id,
        key: key,
        value: value,
        token: token
      });
    };

    Cell.prototype.get = function(key) {
      return this.data[key];
    };

    Cell.prototype.set_data = function(data) {
      var k, token, v;
      token = get_next_token();
      for (k in data) {
        v = data[k];
        this.set(k, v, token, false);
      }
      return cells.fire('set_cell_data', {
        id: this.id,
        data: data,
        token: token
      });
    };

    Cell.prototype.clear = function() {
      return this.set_data({});
    };

    return Cell;

  })();

}).call(this);
