// Generated by CoffeeScript 1.3.3
(function() {
  var app, cells, handle_set_cell_value, socket,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  cells = new app.types.Cells();

  socket = io.connect();

  socket.on('connect', function() {
    cells.bind(socket.emit.curry('set_cell_value'));
    return cells.bind(socket.emit.curry('set_cell_data'));
  });

  handle_set_cell_value = function(data) {
    var id, key, set_value, token, value,
      _this = this;
    id = data.id;
    key = data.key;
    value = data.value;
    token = data.token;
    console.log("handler [set_cell_value] " + id + " " + key + " " + value + " " + token);
    set_value = function(cell) {
      var token_key;
      token_key = '_' + key;
      if (__indexOf.call(cell, token_key) >= 0) {
        if (token > cell[token_key]) {
          console.log("set_value token new " + cell[token_key] + " " + token);
          cell[token_key] = token;
        } else {
          console.log("set_value token [" + token + "] old");
          return;
        }
      }
      console.log("set_value: " + key + " " + value);
      return cell.key = value;
    };
    console.log("going through id cells " + (cells[id] || []));
    cells.for_each(id, set_value);
    console.log("going through token cells " + (cells[token] || []));
    cells.for_each(token, set_value);
    cells[token] || [];
    (cells[token] || []).forEach(function(cell, i, l) {
      set_value(cell);
      if (id) {
        console.log("cell now has id, updating");
        if (!cells[id]) {
          cells[id] = [];
        }
        cells[id].push(cell);
        cells[token].remove(cell);
        if (!cells[token].length) {
          return delete cells[token];
        }
      }
    });
    return {
      set_cell_data: function(data) {
        var k, new_values, v, _results;
        id = data.id;
        token = id.token;
        new_values = data.new_values;
        console.log("set_cell_data " + id + " " + new_value + " " + token);
        _results = [];
        for (k in new_values) {
          v = new_values[k];
          _results.push(handlers.set_cell_value(id, {
            id: id,
            key: k,
            value: v,
            token: token
          }));
        }
        return _results;
      }
    };
  };

  socket = io.connect();

  socket.on('connect', function() {
    var event_name, handler;
    console.log('connected!');
    for (event_name in event_handlers) {
      handler = event_handlers[event_name];
      socket.on(event_name, handler);
      cells.bind(event_name, handler);
    }
    cells.bind('set_cell_value', function(data) {
      console.log("cell set_cell_value => server");
      return socket.emit('set_cell_value', data);
    });
    return cells.bind('set_cell_data', function(data) {
      console.log("cell set_cell_data => server");
      return socket.emit('set_cell_data', data);
    });
  });

  app = this.app = {};

  app.cells = cells;

}).call(this);
