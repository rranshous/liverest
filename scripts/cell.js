// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['spine'], function(spine) {
    var Cell;
    return Cell = (function(_super) {

      __extends(Cell, _super);

      Cell.extend(Spine.Events);

      function Cell(id) {
        this.id = id;
        this.tokens = {};
      }

      Cell.prototype._new_token_id = function() {
        return new Date().getTime();
      };

      Cell.prototype.set = function(key, value, token, fire, callback) {
        if (fire == null) {
          fire = true;
        }
        if (callback == null) {
          callback = function() {};
        }
        console.log("cell [set] " + key + " " + value + " " + token + " " + fire);
        if (!((token != null) || token > this.tokens[key])) {
          callback(false, key, value);
          return;
        }
        token = this.tokens[key] = this._new_token_id();
        return this._set(key, value, function() {
          if (fire) {
            console.log("cells firing set_cell_value");
            this.fire('set_cell_value', {
              key: key,
              value: value,
              token: token
            });
          }
          return callback(true, key, value);
        });
      };

      Cell.prototype._set = function(key, value, callback) {
        if (callback == null) {
          callback = function() {};
        }
        return callback(true, key, value);
      };

      Cell.prototype.get = function(key) {
        return this.data[key];
      };

      Cell.prototype.set_data = function(data, callback) {
        var done, token, total;
        if (callback == null) {
          callback = function() {};
        }
        if (!(data != null ? data.length : void 0)) {
          return;
        }
        token = this._new_token_id();
        total = data.length;
        done = 0;
        return this.set(k, v, token, false, function(success, key, value) {
          done += 1;
          if (total === done) {
            callback(true, data);
            return this.fire('set_cell_data', {
              id: this.id,
              data: data,
              token: token
            });
          }
        });
      };

      Cell.prototype.clear = function() {
        return this.set_data({});
      };

      return Cell;

    })(Spine.Module);
  });

}).call(this);
