// Generated by CoffeeScript 1.3.3
(function() {
  var __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['spine'], function(spine) {
    var Condition, Mediator, mediator;
    Condition = (function() {

      function Condition(fn, callback) {
        this.fn = fn;
        this.callback = callback;
      }

      Condition.prototype.match = function() {
        var data, ev;
        ev = arguments[0], data = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if (this.fn(ev, data)) {
          return true;
        } else {
          return false;
        }
      };

      return Condition;

    })();
    Mediator = (function(_super) {

      __extends(Mediator, _super);

      function Mediator() {
        return Mediator.__super__.constructor.apply(this, arguments);
      }

      Mediator.extend(Spine.Events);

      Mediator.prototype.bind = function(ev, callback) {
        var condition, conditions;
        if (typeof ev === 'function') {
          conditions = this._conditions || (this._conditions = []);
          condition = new Condition(ev, callback);
          return conditions.push(condition);
        } else {
          return Mediator.__super__.bind.call(this, ev, callback);
        }
      };

      Mediator.prototype.trigger = function() {
        var args, condition, _args, _i, _len, _ref, _results;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        _args = args.slice(0);
        Mediator.__super__.trigger.call(this, args);
        _ref = this._conditions;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          condition = _ref[_i];
          if (condition.match(_args)) {
            _results.push(condition.callback(args.slice(1)));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      Mediator.prototype.on = Mediator.bind;

      Mediator.prototype.un = Mediator.unbind;

      Mediator.prototype.fire = Mediator.trigger;

      Mediator.prototype.first = Mediator.one;

      return Mediator;

    })(spine.Module);
    return mediator = new Mediator();
  });

}).call(this);
