// Generated by CoffeeScript 1.3.3
(function() {
  var cell_handlers, get_cell_hash, get_next_cell_id, method, rc, redback, redis, restify, server, _i, _len, _ref;

  restify = require('restify');

  redis = require('redis');

  rc = redis.createClient(6379, "127.0.0.1");

  rc.on('error', function(err) {
    return console.log("rc error: " + err);
  });

  redback = require('redback').createClient();

  server = restify.createServer();

  server.use(restify.bodyParser());

  server.use(restify.queryParser());

  get_cell_hash = function(id) {
    return redback.createHash("cell:" + id);
  };

  get_next_cell_id = function(callback) {
    return rc.incr('cell:counter', function(err, id) {
      console.log("Got cell counter: " + id);
      return callback(id);
    });
  };

  cell_handlers = {
    get: function(req, res, next) {
      var hash;
      console.log("Get request");
      hash = get_cell_hash(req.params.id);
      hash.get(function(err, obj) {
        console.log("Get " + req.params.id + ":");
        console.log(obj);
        return res.send(obj);
      });
      return next();
    },
    head: function(req, res, next) {
      return cell_handlers.get(req, res, next);
    },
    post: function(req, res, next) {
      var set_data;
      console.log("Post request:");
      console.log(req.params);
      set_data = function(data) {
        var hash;
        hash = get_cell_hash(data.id);
        return hash.set(req.params, function(err, resp) {
          console.log("Set " + data.id + ":");
          console.log(data);
          return res.send(data);
        });
      };
      if (req.params.id) {
        console.log("key found: " + req.params.id);
        set_data(req.params);
      } else {
        console.log("key not found");
        get_next_cell_id(function(cell_id) {
          req.params.id = cell_id;
          return set_data(req.params);
        });
      }
      return next();
    },
    put: function(req, res, next) {
      return cell_handlers.get(req, res, next);
    },
    del: function(req, res, next) {
      var hash;
      console.log("Del request");
      hash = get_cell_hash(req.params.id);
      hash.destroy(function(err, resp) {
        return console.log("Destroyed " + req.params.id + ": " + resp);
      });
      return next();
    }
  };

  _ref = ['get', 'head', 'put', 'del'];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    method = _ref[_i];
    console.log("setting up " + method + " handler");
    server[method]('/cell/:id', cell_handlers[method]);
  }

  server.post('/cell', cell_handlers.post);

  server.listen(8081, function() {
    return console.log("" + server.name + " listening at " + server.url);
  });

}).call(this);
